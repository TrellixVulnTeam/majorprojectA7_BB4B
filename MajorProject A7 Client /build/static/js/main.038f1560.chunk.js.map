{"version":3,"sources":["SignLanguageToSpeech.js","Home.js","404.js","App.js","index.js"],"names":["SignLanguageToSpeech","useState","generatedTextFromModel","setGeneratedTextFromModel","sentence","setSentence","displayText","setdisplayText","speak","useSpeechSynthesis","labelMap","1","name","color","2","3","4","5","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke","webcamRef","useRef","canvasRef","runCoco","a","tf","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","array","getContext","requestAnimationFrame","useEffect","className","class","style","ref","muted","position","left","right","zindex","type","marginRight","onClick","join","Home","show","setShow","fullscreen","setFullscreen","src","alt","Button","variant","breakpoint","Modal","onHide","window","location","reload","Header","closeButton","Title","Body","NotFound","App","path","exact","to","ReactDOM","render","StrictMode","href","rel","integrity","crossorigin","document","getElementById"],"mappings":"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","file":"static/js/main.038f1560.chunk.js","sourcesContent":["// Import dependencies\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\n\r\n\r\nfunction SignLanguageToSpeech() {\r\n    const [generatedTextFromModel, setGeneratedTextFromModel] = useState(\"\");\r\n    const [sentence, setSentence] = useState([]);\r\n    const [displayText, setdisplayText] = useState(\"\");\r\n    const { speak } = useSpeechSynthesis();\r\n\r\n    // Define our labelmap\r\n    const labelMap = {\r\n        1: { name: 'Hello', color: 'red' },\r\n        2: { name: 'Thank You', color: 'yellow' },\r\n        3: { name: 'I Love You', color: 'lime' },\r\n        4: { name: 'Yes', color: 'blue' },\r\n        5: { name: 'No', color: 'purple' },\r\n    }\r\n\r\n\r\n    // Define a drawing function\r\n    const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx) => {\r\n\r\n        for (let i = 0; i <= boxes.length; i++) {\r\n            if (boxes[i] && classes[i] && scores[i] > threshold) {\r\n                // Extract variables\r\n                const [y, x, height, width] = boxes[i]\r\n                const text = classes[i]\r\n\r\n                // Set styling\r\n                ctx.strokeStyle = labelMap[text]['color']\r\n                ctx.lineWidth = 10\r\n                ctx.fillStyle = 'white'\r\n                ctx.font = '30px Arial'\r\n\r\n\r\n                // DRAW!!\r\n                ctx.beginPath()\r\n                ctx.fillText(labelMap[text]['name'] + ' - ' + Math.round(scores[i] * 100) / 100, x * imgWidth, y * imgHeight - 10)\r\n                ctx.rect(x * imgWidth, y * imgHeight, width * imgWidth / 2, height * imgHeight / 1.5);\r\n                ctx.stroke()\r\n\r\n                setGeneratedTextFromModel(labelMap[text]['name']);\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const webcamRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n\r\n    // Main function\r\n    const runCoco = async () => {\r\n        const net = await tf.loadGraphModel('https://majorprojecta7.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json')\r\n\r\n        //  Loop and detect hands\r\n        setInterval(() => {\r\n            detect(net);\r\n        }, 16.7);\r\n    };\r\n\r\n    const detect = async (net) => {\r\n        // Check data is available\r\n        if (\r\n            typeof webcamRef.current !== \"undefined\" &&\r\n            webcamRef.current !== null &&\r\n            webcamRef.current.video.readyState === 4\r\n        ) {\r\n            // Get Video Properties\r\n            const video = webcamRef.current.video;\r\n            const videoWidth = webcamRef.current.video.videoWidth;\r\n            const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n            // Set video width\r\n            webcamRef.current.video.width = videoWidth;\r\n            webcamRef.current.video.height = videoHeight;\r\n\r\n            // Set canvas height and width\r\n            canvasRef.current.width = videoWidth;\r\n            canvasRef.current.height = videoHeight;\r\n\r\n            // Make Detections\r\n            const img = tf.browser.fromPixels(video)\r\n            const resized = tf.image.resizeBilinear(img, [640, 480])\r\n            const casted = resized.cast('int32')\r\n            const expanded = casted.expandDims(0)\r\n            const obj = await net.executeAsync(expanded)\r\n            // console.log(obj)\r\n\r\n            const boxes = await obj[1].array()\r\n            const classes = await obj[2].array()\r\n            const scores = await obj[4].array()\r\n\r\n            // Draw mesh\r\n            const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n            // drawSomething(obj, ctx)  \r\n            requestAnimationFrame(() => { drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx) });\r\n            tf.dispose(img)\r\n            tf.dispose(resized)\r\n            tf.dispose(casted)\r\n            tf.dispose(expanded)\r\n            tf.dispose(obj)\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => { runCoco() }, []);\r\n\r\n    const captureText = () =>{\r\n        if (generatedTextFromModel === \"\") {\r\n            speak({text: \"No predicted text to capture\"})\r\n            setdisplayText(\"No predicted text to capture\");\r\n            return;\r\n        }\r\n        setSentence([...sentence, generatedTextFromModel]);\r\n        setdisplayText(\"Captured \" + generatedTextFromModel);\r\n    }\r\n\r\n    const sayText = () => {\r\n        if (sentence.length === 0) {\r\n            speak({text: \"No captured text to say\"})\r\n            setdisplayText(\"No captured text to say\");\r\n            return;\r\n        }\r\n        speak({text: sentence.join(\" \")})\r\n        setdisplayText(sentence.join(\" \"));\r\n    }\r\n\r\n    const clearText = () => {\r\n        setGeneratedTextFromModel(\"\");\r\n        setdisplayText(\"\");\r\n        setSentence([]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container position-absolute top-50 start-50 translate-middle\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm-8\">\r\n                        <div class=\"card shadow border-0\" style={{ width: 640, height: 480 }}>\r\n                            <Webcam\r\n                                ref={webcamRef}\r\n                                muted={true}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    left: 0,\r\n                                    right: 0,\r\n                                    width: 640,\r\n                                    height: 480,\r\n                                    zindex: 8,\r\n                                }}\r\n                            />\r\n                            <canvas\r\n                                ref={canvasRef}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    left: 0,\r\n                                    right: 0,\r\n                                    width: 640,\r\n                                    height: 480,\r\n                                    zindex: 9,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-sm-4\">\r\n                        <div class=\"card shadow border-0\">\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">Predicted Text</h5>\r\n                                <div class=\"d-grid gap-2 d-md-block\">\r\n                                    <button type=\"button\" className=\"btn btn-info btn-sm\" style={{ marginRight: 10 }} onClick={captureText}>Capture Text</button>\r\n                                    <button type=\"button\" className=\"btn btn-danger btn-sm\" style={{ marginRight: 10 }} onClick={clearText}>Clear Text</button>\r\n                                    <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={sayText}>Say Text</button>\r\n                                </div>\r\n                                <hr />\r\n                                <h5>{displayText === '' ? sentence : displayText}</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SignLanguageToSpeech;\r\n","import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport SignLanguageToSpeech from './SignLanguageToSpeech';\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\n\r\nfunction Home() {\r\n  const [show, setShow] = useState(false);\r\n  const [fullscreen, setFullscreen] = useState(true);\r\n  const { speak } = useSpeechSynthesis();\r\n\r\n  function handleShow(breakpoint) {\r\n    setFullscreen(breakpoint);\r\n    setShow(true);\r\n    speak({ text: \"Welcome to Sign Language To Speech Converter Application\" });\r\n  }\r\n\r\n  function handleClose() {\r\n    setShow(false);\r\n    window.location.reload(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"px-4 py-5 my-5 text-center\">\r\n        <img class=\"d-block mx-auto mb-4\" src=\"https://upload.wikimedia.org/wikipedia/commons/7/7d/American_Sign_Language_ASL.svg\" alt=\"\" width=\"400\" />\r\n        <h1 class=\"display-5 fw-bold\">Sign Language To Speech Converter</h1>\r\n        <div class=\"col-lg-6 mx-auto\">\r\n          <p class=\"lead mb-4\">A language translator is extensively utilized by the mute people for converting and giving shape to their thoughts. A system is in urgent need of recognizing and translating sign language.</p>\r\n          <div class=\"d-grid gap-2 d-sm-flex justify-content-sm-center\">\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n              Start Camera\r\n            </Button>\r\n\r\n            <Modal show={show} fullscreen={fullscreen} onHide={handleClose}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Sign Language To Speech Converter</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body><SignLanguageToSpeech /></Modal.Body>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import React from 'react';\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <div className='notFound'>\r\n            <h1>Not Found</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport NotFound from './404';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact><Home /></Route>\n        <Route path=\"/404\" exact><NotFound /></Route>\n        <Redirect to=\"/404\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link href=\"https://getbootstrap.com/docs/5.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor\" crossorigin=\"anonymous\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}